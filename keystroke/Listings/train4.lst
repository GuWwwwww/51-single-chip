C51 COMPILER V9.54   TRAIN4                                                                11/07/2024 14:00:01 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE TRAIN4
OBJECT MODULE PLACED IN .\Objects\train4.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE train4.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\tr
                    -ain4.lst) TABS(2) OBJECT(.\Objects\train4.obj)

line level    source

   1          /*
   2          该程序实现了计算器的加减乘除运算，连加连减连乘连除；
   3          可以对负数运算，与电脑计算器相同，有+/-按钮可以实现符号转换，如果是第一个操作数，
   4          也可以直接按负号输入负数；
   5          可以输入并显示小数，并做运算，但结果只能保留整数（还未实现小数的具体操作）；
   6          加入了平方按钮，先按下数字，再按平方按钮可直接显示平方结果；
   7          加入了删除按钮，可以删除上一个输入的位，如234――>23;
   8          */
   9          
  10          #include<reg51.h>
  11          #include<math.h>
  12          #define N 8 
  13          #define Wx_port P2
  14          #define Dx_port P0
  15          sbit k1=P3^0;
  16          sbit k2=P3^1;
  17          sbit k3=P3^2;
  18          sbit k4=P3^3;
  19          sbit o1=P3^4;
  20          sbit o2=P3^5;
  21          sbit o3=P3^6;
  22          sbit o4=P3^7;
  23          sbit o5=P1^0;
  24          bit flag=0;
  25          bit flag_p=0;
  26          char sign=1; //定义符号位
  27          unsigned char count=0; //记录小数点后面的位数
  28          unsigned char disp_code[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f};
  29          unsigned char code seg_mode[11]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x00};
  30          unsigned char cur_sta[4][5]={{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1}};
  31          unsigned char pre_sta[4][5]={{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1},{1,1,1,1,1}};
  32          unsigned int cur_decimal=0; //定义小数部分
  33          unsigned int cur_integer=0; //定义整数部分
  34          
  35          void delay_ms(unsigned char z)
  36          {
  37   1        unsigned int i,j;
  38   1        for(i=0;i<z;i++)
  39   1          for(j=0;j<125;j++);
  40   1      }
  41          
  42          void  seg_led_scan()
  43          {
  44   1        static unsigned char i=0;
  45   1        Wx_port=(0xfe<<i)|(0xfe>>(8-i));//位选信号，控制哪个数码管亮
  46   1        Dx_port=disp_code[i]; //段选信号，控制亮什么
  47   1        delay_ms(1);//控制刷新率
  48   1        Dx_port=0x00;//消影
  49   1        i++;
  50   1        if(i==N) i=0;
  51   1      }
  52          
  53          void cur_sta_update()
  54          {
C51 COMPILER V9.54   TRAIN4                                                                11/07/2024 14:00:01 PAGE 2   

  55   1        static unsigned char buff[4][5]={{0xff,0xff,0xff,0xff,0xff},{0xff,0xff,0xff,0xff,0xff},
  56   1                                        {0xff,0xff,0xff,0xff,0xff},{0xff,0xff,0xff,0xff,0xff}};
  57   1        unsigned char i=0;
  58   1        static unsigned char j=0; 
  59   1        //消抖              
  60   1        switch(j)
  61   1        {
  62   2          case 0: o1=0;o2=1;o3=1;o4=1;o5=1;break;
  63   2          case 1: o1=1;o2=0;o3=1;o4=1;o5=1;break;
  64   2          case 2: o1=1;o2=1;o3=0;o4=1;o5=1;break;
  65   2          case 3: o1=1;o2=1;o3=1;o4=0;o5=1;break;
  66   2          case 4: o1=1;o2=1;o3=1;o4=1;o5=0;break;
  67   2          default: break;
  68   2        }
  69   1        buff[0][j]=(buff[0][j]<<1)|k1;//把新抽样的值加到buff中
  70   1        buff[1][j]=(buff[1][j]<<1)|k2;//把新抽样的值加到buff中
  71   1        buff[2][j]=(buff[2][j]<<1)|k3;//把新抽样的值加到buff中
  72   1        buff[3][j]=(buff[3][j]<<1)|k4;//把新抽样的值加到buff中
  73   1        for(i=0;i<4;i++)
  74   1        {
  75   2          if (buff[i][j]==0xff)//8次采样全为1
  76   2            cur_sta[i][j]=1;
  77   2          else if (buff[i][j]==0x00)//全为0
  78   2            cur_sta[i][j]=0;
  79   2        }
  80   1        j++;
  81   1        if(j==5) j=0;
  82   1      }
  83          
  84          char key_scan()
  85          {
  86   1        unsigned char key_value=-1;
  87   1        unsigned char i=0;
  88   1        unsigned char j=0;
  89   1        for (j=0;j<5;j++)
  90   1        {
  91   2          for(i=0;i<4;i++)
  92   2          {
  93   3            {
  94   4              if(cur_sta[i][j]!=pre_sta[i][j])
  95   4              {
  96   5                if(pre_sta[i][j])
  97   5                {
  98   6                  key_value=i+4*j;
  99   6                }
 100   5                pre_sta[i][j]=cur_sta[i][j];
 101   5              }
 102   4            }
 103   3          }
 104   2        }
 105   1        return(key_value);//返回按键值
 106   1      }
 107          
 108          void timer1_config()
 109          {
 110   1        TR1=1; //打开定时计数器1
 111   1        TMOD=0x10; //定时器工作方式为1
 112   1        //定时计数器的初始值设置
 113   1        TH1=63536>>8;  //(65536-x)>>8
 114   1        TL1=63536;  //(65536-x)%256
 115   1        EA=1;  //中断总允许
 116   1        ET1=1; //定时器1中断分允许
C51 COMPILER V9.54   TRAIN4                                                                11/07/2024 14:00:01 PAGE 3   

 117   1      }
 118          
 119          void timer1_50ms() interrupt 3
 120          {
 121   1        TH1=63536>>8;  //重新设置初始值
 122   1        TL1=63536;
 123   1        cur_sta_update();
 124   1      }
 125          
 126          
 127          
 128          
 129          
 130          void show(float show_value)
 131          {
 132   1        unsigned char i=0;
 133   1        unsigned char k=0;
 134   1        
 135   1        cur_integer = (unsigned int)show_value; //整数部分
 136   1        cur_decimal = (unsigned int)((show_value - cur_integer) * pow(10, count));//小数部分
 137   1        
 138   1        if (show_value==0)
 139   1        {
 140   2          disp_code[7]=seg_mode[0];
 141   2          k++;
 142   2        }
 143   1        else
 144   1        {
 145   2          if (flag_p==1) //如果有小数，则先显示小数
 146   2          {
 147   3            while (cur_decimal)
 148   3            {
 149   4              disp_code[7-k]=seg_mode[cur_decimal%10];
 150   4              cur_decimal/=10;
 151   4              k++;
 152   4            }
 153   3          }
 154   2          while(cur_integer) //显示整数
 155   2          {
 156   3            disp_code[7-k]=seg_mode[cur_integer%10];
 157   3            cur_integer/=10;
 158   3            k++;
 159   3          }
 160   2          if (sign==-1)  //如果符号是负号，最前面显示负号
 161   2          { 
 162   3            disp_code[7-k]=0x40;
 163   3            k++;
 164   3          }
 165   2          if (flag_p==1)  //如果是小数，在个位数上与0x80相或，显示小数点
 166   2            disp_code[7-count]= disp_code[7-count]|0x80;
 167   2        }
 168   1        for(i=0;i<(8-k);i++)
 169   1          disp_code[i]=0x00; //清除之前的显示
 170   1      }
 171          
 172          void key_action(unsigned char key_value)
 173          {
 174   1        static float cur_value=0;   //记录按键输入的数字
 175   1        static float cur_value_real=0;
 176   1        static int result=0;
 177   1        static unsigned int result_unsigned=0;
 178   1        static int add1=0;
C51 COMPILER V9.54   TRAIN4                                                                11/07/2024 14:00:01 PAGE 4   

 179   1        static unsigned char op=0;
 180   1        if (key_value>=0 && key_value<=9) //按下数字
 181   1        {
 182   2          if (flag_p==1)
 183   2          {
 184   3            count++;
 185   3            cur_value+=key_value*pow(10,-count);
 186   3          }
 187   2          else
 188   2            cur_value=cur_value*10+key_value;
 189   2          cur_value_real=cur_value*sign; //加上符号，计算真实值
 190   2          show(cur_value);
 191   2        }
 192   1        else if (key_value==10) //按下小数点
 193   1        {
 194   2          flag_p=1;
 195   2          count=0;
 196   2          show(cur_value);
 197   2        }
 198   1        else if (key_value==11) //平方键，对操作数进行平方运算
 199   1        {
 200   2          cur_value_real*=cur_value_real;
 201   2          sign=1;
 202   2          show(cur_value_real);
 203   2        }
 204   1        else if (key_value>=12 && key_value<=15) //按下符号
 205   1        {
 206   2          if(op==0 && cur_value==0 && result==0 && key_value==13)//当第一个按下减号也可以当作负号
 207   2            sign=-1;
 208   2          else
 209   2          {
 210   3            sign=1;
 211   3            op=key_value;
 212   3          }
 213   2          if (flag==1) cur_value_real=result;//把上一步的结果存起来
 214   2          add1=cur_value_real; //把键入的第一个操作数存起来
 215   2          flag=0;
 216   2          flag_p=0;
 217   2          cur_value=0;
 218   2          cur_decimal=0;
 219   2          cur_integer=0;
 220   2          sign=1;
 221   2        }
 222   1        else if (key_value==16) //按下删除键，删除上一个按下的数字
 223   1        {
 224   2          if (flag_p==1) //如果有小数，则删除小数位
 225   2          {
 226   3            cur_decimal/=10;
 227   3            count--;
 228   3            cur_value=cur_integer+cur_decimal*pow(10,-count);
 229   3          }
 230   2          else
 231   2            cur_value/=10;
 232   2          cur_value_real=cur_value*sign;
 233   2          show(cur_value);
 234   2        }
 235   1        else if (key_value==17) //按下正负号键
 236   1        {
 237   2          sign=-sign;
 238   2          cur_value_real=cur_value*sign;
 239   2          show(cur_value);
 240   2        }
C51 COMPILER V9.54   TRAIN4                                                                11/07/2024 14:00:01 PAGE 5   

 241   1        else if (key_value==18) //按下等号
 242   1        {
 243   2          flag=1;
 244   2          flag_p=1;
 245   2          count=2;
 246   2          switch(op)
 247   2          {
 248   3            case 12: result=add1+cur_value_real;break;
 249   3            case 13: result=add1-cur_value_real;break;
 250   3            case 14: result=add1*cur_value_real;break;
 251   3            case 15: result=add1/cur_value_real;break;
 252   3            default: break;
 253   3          }
 254   2          if (result<0) sign=-1;//判断结果的正负
 255   2          else sign=1;
 256   2          result_unsigned = (result < 0) ? -result : result; // 计算结果的绝对值
 257   2          show(result_unsigned);
 258   2          flag_p=0;
 259   2          cur_value=0;
 260   2          cur_value_real=0;
 261   2        }
 262   1        else if (key_value==19) //按下清除键
 263   1        {
 264   2          cur_decimal=0;
 265   2          cur_integer=0;
 266   2          cur_value=0;
 267   2          cur_value_real=0;
 268   2          result=0;
 269   2          result_unsigned=0;
 270   2          op=0;
 271   2          flag=0;
 272   2          flag_p=0;
 273   2          count=0;
 274   2          sign=1;
 275   2          show(0);
 276   2        }
 277   1      }
 278          
 279          void main()
 280          {
 281   1        char key_value=-1;
 282   1        timer1_config(); //配置定时器1
 283   1        while(1)
 284   1        {
 285   2          seg_led_scan();
 286   2          key_value=key_scan();
 287   2          key_action(key_value);
 288   2        }
 289   1      }
 290          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1551    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     91       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
