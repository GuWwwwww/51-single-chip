C51 COMPILER V9.54   MATRIX_KEY                                                            11/06/2024 15:23:45 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MATRIX_KEY
OBJECT MODULE PLACED IN .\Objects\matrix_key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE matrix_key.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\matrix_key.lst) TABS(2) OBJECT(.\Objects\matrix_key.obj)

line level    source

   1          /*
   2          计算器实现了连加、负数运算、小数运算。
   3          */
   4          #include<reg51.h>
   5          #include<math.h>
   6          #define N 8
   7          sbit k1=P1^7;
   8          sbit k2=P1^6;
   9          sbit k3=P1^5;
  10          sbit k4=P1^4;
  11          sbit o1=P1^3;
  12          sbit o2=P1^2;
  13          sbit o3=P1^1;
  14          sbit o4=P1^0;
  15          bit flag=0;
  16          bit flag_p=0;
  17          char sign=1; //定义符号位
  18          char count=0; //记录小数点后面的位数
  19          unsigned char cur_sta[4][4]={{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
  20          unsigned char pre_sta[4][4]={{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}};
  21          unsigned char code seg_mode[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
  22          unsigned char disp_code[8]={0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
  23          
  24          void delay_ms(unsigned int z)
  25          {
  26   1        unsigned int i,j;
  27   1        for(i=0;i<z;i++)
  28   1          for(j=0;j<125;j++);
  29   1      }
  30          
  31          void seg_led_scan()
  32          {
  33   1        static unsigned int i;
  34   1        unsigned char bit_mode[8]={0xff,0xfa,0xf7,0xf3,0xef,0xea,0xe7,0xe3};
  35   1        
  36   1        P2=bit_mode[i];  //位选信号，控制哪个数码管亮
  37   1        P0=disp_code[i]; //段选信号，控制亮什么
  38   1        delay_ms(1); //控制刷新率
  39   1        //P0=0x00;  //消除鬼影
  40   1        i++;
  41   1        if (i==N) i=0;
  42   1      }
  43          
  44          void cur_sta_update()
  45          {
  46   1        static unsigned char buff[4][4]={{0xff,0xff,0xff,0xff},{0xff,0xff,0xff,0xff},{0xff,0xff,0xff,0xff},{0xff,
             -0xff,0xff,0xff}};
  47   1        unsigned char i=0;
  48   1        static unsigned char j=0; 
  49   1        //消抖              
  50   1        switch(j)
  51   1        {
  52   2          case 0: o1=0;o2=1;o3=1;o4=1;break;
  53   2          case 1: o1=1;o2=0;o3=1;o4=1;break;
C51 COMPILER V9.54   MATRIX_KEY                                                            11/06/2024 15:23:45 PAGE 2   

  54   2          case 2: o1=1;o2=1;o3=0;o4=1;break;
  55   2          case 3: o1=1;o2=1;o3=1;o4=0;break;
  56   2          default: break;
  57   2        }
  58   1        buff[0][j]=(buff[0][j]<<1)|k1;//把新抽样的值加到buff中
  59   1        buff[1][j]=(buff[1][j]<<1)|k2;//把新抽样的值加到buff中
  60   1        buff[2][j]=(buff[2][j]<<1)|k3;//把新抽样的值加到buff中
  61   1        buff[3][j]=(buff[3][j]<<1)|k4;//把新抽样的值加到buff中
  62   1        for(i=0;i<4;i++)
  63   1        {
  64   2          if (buff[i][j]==0xff)//8次采样全为1
  65   2            cur_sta[i][j]=1;
  66   2          else if (buff[i][j]==0x00)//全为0
  67   2            cur_sta[i][j]=0;
  68   2        }
  69   1        j++;
  70   1        if(j==4) j=0;
  71   1      }
  72          
  73          void timer1_config()
  74          {
  75   1        TR1=1; //打开定时计数器1
  76   1        TMOD=0x10; //定时器工作方式为1
  77   1        //定时计数器的初始值设置
  78   1        TH1=63536>>8;  //(65536-x)>>8
  79   1        TL1=63536;  //(65536-x)%256
  80   1        EA=1;  //中断总允许
  81   1        ET1=1; //定时器1中断分允许
  82   1      }
  83          
  84          void timer1_50ms() interrupt 3
  85          {
  86   1        TH1=63536>>8;  //重新设置初始值
  87   1        TL1=63536;
  88   1        cur_sta_update();
  89   1      }
  90          
  91          char key_scan()
  92          {
  93   1        unsigned char key_value=-1;
  94   1        unsigned char i=0;
  95   1        unsigned char j=0;
  96   1        for (j=0;j<4;j++)
  97   1        {
  98   2          for(i=0;i<4;i++)
  99   2          {
 100   3            {
 101   4              if(cur_sta[i][j]!=pre_sta[i][j])
 102   4              {
 103   5                if(pre_sta[i][j])
 104   5                {
 105   6                  key_value=i+4*j;
 106   6                }
 107   5                pre_sta[i][j]=cur_sta[i][j];
 108   5              }
 109   4            }
 110   3          }
 111   2        }
 112   1        return(key_value);//返回按键值
 113   1      }
 114          
 115          int round(float value)
C51 COMPILER V9.54   MATRIX_KEY                                                            11/06/2024 15:23:45 PAGE 3   

 116          {
 117   1        return (int)(value + 0.5);
 118   1      }
 119          
 120          unsigned int temp_integer=0;
 121          unsigned int temp_decimal=0;
 122          
 123          void show(float show_value)
 124          {
 125   1        unsigned char i=0;
 126   1        unsigned char k=0;
 127   1        
 128   1        //分离整数和小数部分
 129   1        temp_integer = (unsigned int)show_value; //整数部分
 130   1        temp_decimal = (unsigned int)(round((show_value - temp_integer) * pow(10, count)));//小数部分
 131   1        if (show_value==0)
 132   1        {
 133   2          disp_code[7]=seg_mode[0];
 134   2          k++;
 135   2        }
 136   1        else
 137   1        {
 138   2          if (flag_p==1)
 139   2          {
 140   3            while(temp_decimal)
 141   3            {
 142   4              disp_code[7-k]=seg_mode[temp_decimal%10];
 143   4              temp_decimal/=10;
 144   4              k++;
 145   4            }
 146   3          }
 147   2          while(temp_integer)
 148   2          {
 149   3            disp_code[7-k]=seg_mode[temp_integer%10];
 150   3            temp_integer/=10;
 151   3            k++;
 152   3          }
 153   2          if (sign==-1)  //如果符号是负号，最前面显示负号
 154   2          { 
 155   3            disp_code[7-k]=0x40;
 156   3            k++;
 157   3          }
 158   2          if (flag_p==1) //如果是小数，在个位数上与0x80相或显示小数点
 159   2            disp_code[7-count]=disp_code[7-count]|0x80;
 160   2        }
 161   1        for(i=0;i<(8-k);i++)
 162   1          disp_code[i]=0x00; //清除之前的显示
 163   1      }
 164          
 165          void key_action(unsigned char key_value)
 166          {
 167   1        static int cur_integer=0; //整数部分
 168   1        static int cur_point=0;  //小数部分
 169   1        static float cur_value_real=0;
 170   1        static float cur_value_unsigned=0;
 171   1        static float result=0;
 172   1        static float result_unsigned=0;
 173   1        static float add1=0;
 174   1        static unsigned char op=0;
 175   1        static unsigned char pre_key_value=0;
 176   1        if (key_value>=0 && key_value<=9) //按下数字
 177   1        {
C51 COMPILER V9.54   MATRIX_KEY                                                            11/06/2024 15:23:45 PAGE 4   

 178   2          if (flag_p==1)//小数点标志位为1，按下数字为小数
 179   2          {
 180   3            cur_point=cur_point*10+key_value;
 181   3            count++;
 182   3          }
 183   2          else
 184   2          {
 185   3            cur_integer=cur_integer*10+key_value;
 186   3          }
 187   2          cur_value_real=(cur_integer+cur_point*pow(10,-count))*sign;
 188   2          cur_value_unsigned=(cur_value_real < 0) ? -cur_value_real : cur_value_real; // 计算当前值的绝对值
 189   2          show(cur_value_unsigned);
 190   2        }
 191   1        else if (key_value>=10 && key_value<=12) //按下符号
 192   1        {
 193   2          //判断操作数为负的情况(第一个操作数为负，或者上一个键值为操作符，紧跟着负号的情况)
 194   2          if ((op==0 && cur_integer==0 && result==0 && key_value==11) || (pre_key_value>=10 && pre_key_value<=12 &
             -& key_value==11))
 195   2            sign=-1;
 196   2          else
 197   2          {
 198   3            sign=1;
 199   3            op=key_value;
 200   3          }
 201   2          if (flag==1) cur_value_real=result;//把上一步的结果存起来
 202   2          add1=cur_value_real; //把键入的第一个操作数存起来
 203   2          flag=0;
 204   2          flag_p=0;
 205   2          cur_integer=0;
 206   2          cur_point=0;
 207   2        }
 208   1        else if (key_value==13) //按下小数点
 209   1        {
 210   2          flag_p=1;
 211   2          count=0; //小数点位数重新开始记录
 212   2          cur_point = 0; // 重置小数部分
 213   2          show(cur_value_unsigned);
 214   2        }
 215   1        
 216   1        else if (key_value==14) //按下等号
 217   1        {
 218   2          flag_p=1; //小数点判断符置1，允许结果显示小数
 219   2          flag=1;
 220   2          switch(op)
 221   2          {
 222   3            case 10: result=cur_value_real+add1;break;
 223   3            case 11: result=add1-cur_value_real;break;
 224   3            case 12: result=add1*cur_value_real;break;
 225   3            case 13: result=add1/cur_value_real;break;
 226   3            default: break;
 227   3          }
 228   2          if (result<0) sign=-1;//判断结果的正负
 229   2          else sign=1;
 230   2          result_unsigned = (result < 0) ? -result : result; // 计算结果的绝对值
 231   2          if (result != (int)result)
 232   2          {
 233   3              flag_p = 1;  // ???????
 234   3              count = 0;  // ?????????
 235   3              cur_point = result_unsigned - (int)result_unsigned;  // ??????
 236   3              
 237   3              // ???????????????(????4???)
 238   3              while (cur_point > 0)
C51 COMPILER V9.54   MATRIX_KEY                                                            11/06/2024 15:23:45 PAGE 5   

 239   3              {
 240   4                  cur_point *= 10;
 241   4                  cur_point -= (int)cur_point;
 242   4                  count++;
 243   4              }
 244   3          }
 245   2          else
 246   2          {
 247   3              flag_p = 0;  // ????????,???????
 248   3              count = 0;
 249   3          }
 250   2          show(result_unsigned);
 251   2          flag_p=0;
 252   2          cur_integer=0;
 253   2          cur_point=0;
 254   2          cur_value_real=0;
 255   2        }
 256   1        else if (key_value==15) //按下清除键
 257   1        {
 258   2          cur_integer=0;
 259   2          cur_point=0;
 260   2          cur_value_real=0;
 261   2          cur_value_unsigned=0;
 262   2          pre_key_value=0;
 263   2          result=0;
 264   2          op=0;
 265   2          flag=0;
 266   2          flag_p=0;
 267   2          sign=1;
 268   2          show(0);
 269   2        }
 270   1        pre_key_value=key_value;
 271   1      }
 272          
 273          void main()
 274          {
 275   1        char key_value=-1;
 276   1        timer1_config(); //配置定时器1
 277   1        while(1)
 278   1        {
 279   2          seg_led_scan();
 280   2          key_value=key_scan();
 281   2          key_action(key_value);
 282   2        }
 283   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1535    ----
   CONSTANT SIZE    =     18    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     91      20
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
